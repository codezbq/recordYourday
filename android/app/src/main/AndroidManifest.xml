<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.flutter_app_y">
  <!--访问网络-->
  <uses-permission android:name="android.permission.INTERNET" />
  <!--粗略定位-->
  <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
  <!--精确定位-->
  <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
  <!--申请调用A-GPS模块-->
  <uses-permission android:name="android.permission.ACCESS_LOCATION_EXTRA_COMMANDS" />
  <!--用于获取运营商信息，用于支持提供运营商信息相关的接口-->
  <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
  <!--用于访问wifi网络信息，wifi信息会用于进行网络定位-->
  <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
  <!--用于获取wifi的获取权限，wifi信息会用来进行网络定位-->
  <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
  <!--用于读取手机当前的状态-->
  <uses-permission android:name="android.permission.READ_PHONE_STATE" />
  <!--用于写入缓存数据到扩展存储卡-->
  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
  <!-- 程序在手机屏幕关闭后后台进程仍然运行-->
  <uses-permission android:name="android.permission.WAKE_LOCK" />
  <!-- 读取系统信息，包含系统版本等信息，用作统计-->
  <uses-permission android:name="com.android.launcher.permission.READ_SETTINGS" />
  <!-- io.flutter.app.FlutterApplication is an android.app.Application that
         calls FlutterMain.startInitialization(this); in its onCreate method.
         In most cases you can leave this as-is, but you if you want to provide
         additional functionality it is fine to subclass or reimplement
         FlutterApplication and put your custom class here. -->
  <application android:name="io.flutter.app.FlutterApplication" android:label="flutter_app_y" android:icon="@mipmap/ic_launcher">
    <meta-data android:name="com.amap.api.v2.apikey" android:value="be529103cc824e1978a8611fa623ebe1"/>
    <service android:name="com.amap.api.location.APSService"/>
    <meta-data android:name="com.baidu.lbsapi.API_KEY" android:value="StD8fUcb6TdposFPkEdjyODj5TuinOhH" />
    <activity android:name=".MainActivity" android:launchMode="singleTop" android:theme="@style/LaunchTheme" android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode" android:hardwareAccelerated="true" android:windowSoftInputMode="adjustResize">
      <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
      <meta-data android:name="io.flutter.embedding.android.NormalTheme" android:resource="@style/NormalTheme" />
      <!-- Displays an Android View that continues showing the launch screen
                 Drawable until Flutter paints its first frame, then this splash
                 screen fades out. A splash screen is useful to avoid any visual
                 gap between the end of Android's launch screen and the painting of
                 Flutter's first frame. -->
      <meta-data android:name="io.flutter.embedding.android.SplashScreenDrawable" android:resource="@drawable/launch_background" />
      <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
      </intent-filter>
    </activity>
    <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
    <meta-data android:name="flutterEmbedding" android:value="2" />
  </application>
</manifest>
